From 7f25245f271be8f6a7703819f261c9eb205e38dc Mon Sep 17 00:00:00 2001
From: Russell Keith-Magee <russell@keith-magee.com>
Date: Fri, 2 Dec 2022 14:27:45 +0800
Subject: [PATCH 3/6] Apply pre-commit changes.

---
 examples/gtk.py           | 12 ++---
 examples/test-gtk.py      |  5 ++-
 examples/wait_signal.py   | 14 +++---
 src/gbulb/__init__.py     | 12 -----
 src/gbulb/glib_events.py  | 95 ++++++++++++++++++++-------------------
 src/gbulb/gtk.py          | 16 ++++---
 src/gbulb/transports.py   |  8 ++--
 tests/test_glib_events.py |  7 ++-
 tests/test_gtk.py         |  7 +--
 tests/test_utils.py       | 16 ++++---
 10 files changed, 94 insertions(+), 98 deletions(-)

diff --git a/examples/gtk.py b/examples/gtk.py
index 9e8da09..8b60cf5 100644
--- a/examples/gtk.py
+++ b/examples/gtk.py
@@ -1,16 +1,16 @@
 import asyncio
 
-import gbulb
-
 from gi.repository import Gtk
 
+import gbulb
+
 
 @asyncio.coroutine
 def counter(label):
     i = 0
     while True:
         label.set_text(str(i))
-        print('incrementing', i)
+        print("incrementing", i)
         yield from asyncio.sleep(1)
         i += 1
 
@@ -24,8 +24,8 @@ def main():
 
     vbox.pack_start(display, True, True, 0)
 
-    win = Gtk.Window(title='Counter window')
-    win.connect('delete-event', lambda *args: loop.stop())
+    win = Gtk.Window(title="Counter window")
+    win.connect("delete-event", lambda *args: loop.stop())
     win.add(vbox)
 
     win.show_all()
@@ -34,5 +34,5 @@ def main():
     loop.run_forever()
 
 
-if __name__ == '__main__':
+if __name__ == "__main__":
     main()
diff --git a/examples/test-gtk.py b/examples/test-gtk.py
index 5cbfd96..7d54874 100755
--- a/examples/test-gtk.py
+++ b/examples/test-gtk.py
@@ -1,12 +1,13 @@
 #!/usr/bin/env python3
-from gi.repository import Gtk
 import asyncio
+
+from gi.repository import Gtk
+
 import gbulb
 import gbulb.gtk
 
 
 class ProgressBarWindow(Gtk.Window):
-
     def __init__(self):
         Gtk.Window.__init__(self, title="ProgressBar Demo")
         self.set_border_width(10)
diff --git a/examples/wait_signal.py b/examples/wait_signal.py
index 5516a26..51b947f 100644
--- a/examples/wait_signal.py
+++ b/examples/wait_signal.py
@@ -1,9 +1,9 @@
 import asyncio
 
-import gbulb
-
 from gi.repository import Gtk
 
+import gbulb
+
 
 @asyncio.coroutine
 def counter(label):
@@ -17,8 +17,8 @@ def counter(label):
 @asyncio.coroutine
 def text_watcher(label):
     while True:
-        yield from gbulb.wait_signal(label, 'changed')
-        print('label changed', label.get_text())
+        yield from gbulb.wait_signal(label, "changed")
+        print("label changed", label.get_text())
 
 
 def main():
@@ -30,8 +30,8 @@ def main():
 
     vbox.pack_start(display, True, True, 0)
 
-    win = Gtk.Window(title='Counter window')
-    win.connect('delete-event', lambda *args: loop.stop())
+    win = Gtk.Window(title="Counter window")
+    win.connect("delete-event", lambda *args: loop.stop())
     win.add(vbox)
 
     win.show_all()
@@ -41,5 +41,5 @@ def main():
     loop.run_forever()
 
 
-if __name__ == '__main__':
+if __name__ == "__main__":
     main()
diff --git a/src/gbulb/__init__.py b/src/gbulb/__init__.py
index 4113b06..60ec96a 100644
--- a/src/gbulb/__init__.py
+++ b/src/gbulb/__init__.py
@@ -1,16 +1,4 @@
 from .glib_events import *  # noqa: F401,F403
 from .utils import *  # noqa: F401,F403
 
-# __all__ = [
-#     '__version__',
-# ]
-
-# Examples of valid version strings
-# __version__ = '1.2.3.dev1'  # Development release 1
-# __version__ = '1.2.3a1'     # Alpha Release 1
-# __version__ = '1.2.3b1'     # Beta Release 1
-# __version__ = '1.2.3rc1'    # RC Release 1
-# __version__ = '1.2.3'       # Final Release
-# __version__ = '1.2.3.post1' # Post Release 1
-
 __version__ = "0.6.3"
diff --git a/src/gbulb/glib_events.py b/src/gbulb/glib_events.py
index 43933b4..aba5f8e 100644
--- a/src/gbulb/glib_events.py
+++ b/src/gbulb/glib_events.py
@@ -1,4 +1,4 @@
-"""PEP 3156 event loop based on GLib"""
+"""PEP 3156 event loop based on GLib."""
 
 import asyncio
 import os
@@ -7,10 +7,10 @@ import socket
 import sys
 import threading
 import weakref
-from asyncio import constants, events, sslproto, tasks, CancelledError
+from asyncio import CancelledError, constants, events, sslproto, tasks
 
 try:
-    from gi.repository import GLib, Gio
+    from gi.repository import Gio, GLib
 except ImportError:  # pragma: no cover
     GLib = None
     Gio = None
@@ -18,19 +18,16 @@ except ImportError:  # pragma: no cover
 
 from . import transports
 
-
 if hasattr(os, "set_blocking"):
 
     def _set_nonblocking(fd):
         os.set_blocking(fd, False)
 
-
 elif sys.platform == "win32":
 
     def _set_nonblocking(fd):
         pass
 
-
 else:
     import fcntl
 
@@ -50,7 +47,6 @@ if sys.platform == "win32":
     class AbstractChildWatcher:
         pass
 
-
 else:
     from asyncio.unix_events import AbstractChildWatcher
 
@@ -63,6 +59,7 @@ class GLibChildWatcher(AbstractChildWatcher):
     # On windows on has to open a process handle for the given PID number
     # before it's possible to use GLib's `child_watch_add` on it
     if sys.platform == "win32":
+
         def _create_handle_for_pid(self, pid):
             import _winapi
 
@@ -74,6 +71,7 @@ class GLibChildWatcher(AbstractChildWatcher):
             _winapi.CloseHandle(handle)
 
     else:
+
         def _create_handle_for_pid(self, pid):
             return pid
 
@@ -185,17 +183,16 @@ if sys.platform == "win32":
         def close(self):
             pass
 
-
 else:
     from asyncio import unix_events
 
     class GLibBaseEventLoopPlatformExt(unix_events.SelectorEventLoop):
-        """
-        Semi-hack that allows us to leverage the existing implementation of Unix domain sockets
-        without having to actually implement a selector based event loop.
+        """Semi-hack that allows us to leverage the existing implementation of
+        Unix domain sockets without having to actually implement a selector
+        based event loop.
 
-        Note that both `__init__` and `close` DO NOT and SHOULD NOT ever call their parent
-        implementation!
+        Note that both `__init__` and `close` DO NOT and SHOULD NOT ever
+        call their parent implementation!
         """
 
         def __init__(self):
@@ -233,16 +230,19 @@ else:
 
 
 class _BaseEventLoop(asyncio.BaseEventLoop):
-    """
-    Extra inheritance step that needs to be inserted so that we only ever indirectly inherit from
-    `asyncio.BaseEventLoop`. This is necessary as the Unix implementation will also indirectly
+    """Extra inheritance step that needs to be inserted so that we only ever
+    indirectly inherit from `asyncio.BaseEventLoop`.
+
+    This is necessary as the Unix implementation will also indirectly
     inherit from that class (thereby creating diamond inheritance).
-    Python permits and fully supports diamond inheritance so this is not a problem. However it
-    is, on the other hand, not permitted to inherit from a class both directly *and* indirectly –
-    hence we add this intermediate class to make sure that can never happen (see
-    https://stackoverflow.com/q/29214888 for a minimal example a forbidden inheritance tree) and
-    https://www.python.org/download/releases/2.3/mro/ for some extensive documentation of the
-    allowed inheritance structures in python.
+    Python permits and fully supports diamond inheritance so this is not
+    a problem. However it is, on the other hand, not permitted to
+    inherit from a class both directly *and* indirectly – hence we add
+    this intermediate class to make sure that can never happen (see
+    https://stackoverflow.com/q/29214888 for a minimal example a
+    forbidden inheritance tree) and
+    https://www.python.org/download/releases/2.3/mro/ for some extensive
+    documentation of the allowed inheritance structures in python.
     """
 
 
@@ -316,7 +316,7 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
         server_hostname=None,
         extra=None,
         server=None,
-        ssl_handshake_timeout=None
+        ssl_handshake_timeout=None,
     ):
         """Create SSL transport."""
         # sslproto._is_sslproto_available was removed from asyncio, starting from Python 3.7.
@@ -341,7 +341,7 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
             waiter,
             server_side,
             server_hostname,
-            **extra_protocol_kwargs
+            **extra_protocol_kwargs,
         )
         transports.SocketTransport(
             self, rawsock, ssl_protocol, extra=extra, server=server
@@ -376,7 +376,7 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
         stderr,
         bufsize,
         extra=None,
-        **kwargs
+        **kwargs,
     ):
         """Create subprocess transport."""
         with events.get_child_watcher() as watcher:
@@ -392,7 +392,7 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
                 bufsize,
                 waiter=waiter,
                 extra=extra,
-                **kwargs
+                **kwargs,
             )
 
             watcher.add_child_handler(
@@ -482,12 +482,14 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
         from asyncio import coroutines
 
         if coroutines.iscoroutine(callback) or coroutines.iscoroutinefunction(callback):
-            raise TypeError("coroutines cannot be used with {}()".format(name))
+            raise TypeError(f"coroutines cannot be used with {name}()")
 
     def _ensure_fd_no_transport(self, fd):
         """Ensure that the given file descriptor is NOT used by any transport.
 
-        Adding another reader to a fd that is already being waited for causes a hang on Windows."""
+        Adding another reader to a fd that is already being waited for
+        causes a hang on Windows.
+        """
         try:
             transport = self._transports[fd]
         except KeyError:
@@ -530,7 +532,8 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
     def _channel_from_fileobj(self, fileobj):
         """Create GLib IOChannel for the given file object.
 
-        On windows this will only work for files and pipes returned GLib's C library.
+        On windows this will only work for files and pipes returned
+        GLib's C library.
         """
         fd = self._fileobj_to_fd(fileobj)
 
@@ -556,14 +559,14 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
             try:
                 fd = int(fileobj.fileno())
             except (AttributeError, TypeError, ValueError):
-                raise ValueError("Invalid file object: {!r}".format(fileobj))
+                raise ValueError(f"Invalid file object: {fileobj!r}")
         if fd < 0:
-            raise ValueError("Invalid file descriptor: {}".format(fd))
+            raise ValueError(f"Invalid file descriptor: {fd}")
         return fd
 
     def _delayed(self, source, callback=None, *args):
-        """Create a future that will complete after the given GLib Source object has become ready
-        and the data it tracks has been processed."""
+        """Create a future that will complete after the given GLib Source
+        object has become ready and the data it tracks has been processed."""
         future = None
 
         def handle_ready(*args):
@@ -590,14 +593,13 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
         return future
 
     def _socket_handle_errors(self, sock):
-        """Raise exceptions for error states (SOL_ERROR) on the given socket object."""
+        """Raise exceptions for error states (SOL_ERROR) on the given socket
+        object."""
         errno = sock.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
         if errno != 0:
             if sys.platform == "win32":
-                msg = socket.errorTab.get(errno, "Error {0}".format(errno))
-                raise OSError(
-                    errno, "[WinError {0}] {1}".format(errno, msg), None, errno
-                )
+                msg = socket.errorTab.get(errno, f"Error {errno}")
+                raise OSError(errno, f"[WinError {errno}] {msg}", None, errno)
             else:
                 raise OSError(errno, os.strerror(errno))
 
@@ -631,7 +633,7 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
         async def accept_coro(future, conn):
             # Coroutine closing the accept socket if the future is cancelled
             try:
-                return (await future)
+                return await future
             except CancelledError:
                 sock.close()
                 raise
@@ -676,6 +678,7 @@ class GLibBaseEventLoop(_BaseEventLoop, GLibBaseEventLoopPlatformExt):
     #####################################
     def _channel_read(self, channel, nbytes, read_func=None):
         if read_func is None:
+
             def read_func(channel, nbytes):
                 return channel.read(nbytes)
 
@@ -928,17 +931,17 @@ class GLibEventLoop(GLibBaseEventLoop):
 
 
 class GLibEventLoopPolicy(events.AbstractEventLoopPolicy):
-    """Default GLib event loop policy
+    """Default GLib event loop policy.
 
-    In this policy, each thread has its own event loop.  However, we only
-    automatically create an event loop by default for the main thread; other
-    threads by default have no event loop.
+    In this policy, each thread has its own event loop.  However, we
+    only automatically create an event loop by default for the main
+    thread; other threads by default have no event loop.
     """
 
     EventLoopCls = GLibEventLoop
 
     # TODO add a parameter to synchronise with GLib's thread default contexts
-    #   (g_main_context_push_thread_default())
+    # (i.e., g_main_context_push_thread_default())
     def __init__(self, application=None):
         self._default_loop = None
         self._application = application
@@ -960,8 +963,8 @@ class GLibEventLoopPolicy(events.AbstractEventLoopPolicy):
     def set_child_watcher(self, watcher):
         """Set a child watcher.
 
-        Must be an an instance of GLibChildWatcher, as it ties in with GLib
-        appropriately.
+        Must be an an instance of GLibChildWatcher, as it ties in with
+        GLib appropriately.
         """
 
         if watcher is not None and not isinstance(watcher, GLibChildWatcher):
diff --git a/src/gbulb/gtk.py b/src/gbulb/gtk.py
index 48f375d..f6f2789 100644
--- a/src/gbulb/gtk.py
+++ b/src/gbulb/gtk.py
@@ -10,8 +10,8 @@ __all__ = ["GtkEventLoop", "GtkEventLoopPolicy"]
 class GtkEventLoop(GLibEventLoop):
     """Gtk-based event loop.
 
-    This loop supports recursion in Gtk, for example for implementing modal
-    windows.
+    This loop supports recursion in Gtk, for example for implementing
+    modal windows.
     """
 
     def __init__(self, **kwargs):
@@ -24,8 +24,8 @@ class GtkEventLoop(GLibEventLoop):
         """Run the event loop until Gtk.main_quit is called.
 
         May be called multiple times to recursively start it again. This
-        is useful for implementing asynchronous-like dialogs in code that
-        is otherwise not asynchronous, for example modal dialogs.
+        is useful for implementing asynchronous-like dialogs in code
+        that is otherwise not asynchronous, for example modal dialogs.
         """
         if self.is_running():
             with self._recurselock:
@@ -41,7 +41,8 @@ class GtkEventLoop(GLibEventLoop):
     def stop(self):
         """Stop the inner-most event loop.
 
-        If it's also the outer-most event loop, the event loop will stop.
+        If it's also the outer-most event loop, the event loop will
+        stop.
         """
         with self._recurselock:
             r = self._recursive
@@ -52,6 +53,9 @@ class GtkEventLoop(GLibEventLoop):
 
 
 class GtkEventLoopPolicy(GLibEventLoopPolicy):
-    """Gtk-based event loop policy. Use this if you are using Gtk."""
+    """Gtk-based event loop policy.
+
+    Use this if you are using Gtk.
+    """
 
     EventLoopCls = GtkEventLoop
diff --git a/src/gbulb/transports.py b/src/gbulb/transports.py
index f2169e0..9e7d446 100644
--- a/src/gbulb/transports.py
+++ b/src/gbulb/transports.py
@@ -1,7 +1,7 @@
 import collections
 import socket
 import subprocess
-from asyncio import base_subprocess, transports, CancelledError, InvalidStateError
+from asyncio import CancelledError, InvalidStateError, base_subprocess, transports
 
 
 class BaseTransport(transports.BaseTransport):
@@ -370,9 +370,7 @@ class DatagramTransport(Transport, transports.DatagramTransport):
             return
 
         if self._address and addr not in (None, self._address):
-            raise ValueError(
-                "Invalid address: must be None or {0}".format(self._address)
-            )
+            raise ValueError(f"Invalid address: must be None or {self._address}")
 
         # Do not copy the data yet, as we might be able to send it synchronously
         super().write((data, addr))
@@ -421,5 +419,5 @@ class SubprocessTransport(base_subprocess.BaseSubprocessTransport):
             stdout=stdout,
             stderr=stderr,
             bufsize=bufsize,
-            **kwargs
+            **kwargs,
         )
diff --git a/tests/test_glib_events.py b/tests/test_glib_events.py
index 9dc959e..8e52c10 100644
--- a/tests/test_glib_events.py
+++ b/tests/test_glib_events.py
@@ -1,9 +1,8 @@
 import asyncio
 import sys
+from unittest import mock, skipIf
 
 import pytest
-
-from unittest import mock, skipIf
 from gi.repository import Gio, GLib
 
 is_windows = sys.platform == "win32"
@@ -111,7 +110,7 @@ class TestBaseGLibEventLoop:
         assert not glib_loop.remove_signal_handler(signal.SIGHUP)
 
     @skipIf(is_windows, "Unix signal handlers are not supported on Windows")
-    @pytest.mark.filterwarnings('ignore:g_unix_signal_source_new')
+    @pytest.mark.filterwarnings("ignore:g_unix_signal_source_new")
     def test_remove_signal_handler_sigkill(self, glib_loop):
         import signal
 
@@ -119,7 +118,7 @@ class TestBaseGLibEventLoop:
             glib_loop.add_signal_handler(signal.SIGKILL, None)
 
     @skipIf(is_windows, "Unix signal handlers are not supported on Windows")
-    @pytest.mark.filterwarnings('ignore:g_unix_signal_source_new')
+    @pytest.mark.filterwarnings("ignore:g_unix_signal_source_new")
     def test_remove_signal_handler_sigill(self, glib_loop):
         import signal
 
diff --git a/tests/test_gtk.py b/tests/test_gtk.py
index 673b8e9..7fd6c91 100644
--- a/tests/test_gtk.py
+++ b/tests/test_gtk.py
@@ -2,7 +2,8 @@ import pytest
 
 try:
     import gi
-    gi.require_version('Gtk', '3.0')
+
+    gi.require_version("Gtk", "3.0")
 
     from gi.repository import Gtk
 except ImportError:  # pragma: no cover
@@ -39,12 +40,12 @@ class TestGtkEventLoopPolicy:
             loop_count += 1
 
             if loop_count == 10:
-                print("loop {} stopped".format(i))
+                print(f"loop {i} stopped")
                 gtk_loop.stop()
             else:
                 gtk_loop.call_soon(inner)
                 gtk_loop.run()
-                print("loop {} stopped".format(i))
+                print(f"loop {i} stopped")
                 gtk_loop.stop()
 
         gtk_loop.call_soon(inner)
diff --git a/tests/test_utils.py b/tests/test_utils.py
index fdee3ce..4d31d5b 100644
--- a/tests/test_utils.py
+++ b/tests/test_utils.py
@@ -13,9 +13,10 @@ import pytest
     ],
 )
 def test_install(gtk, gtk_available):
-    from gbulb import install
     import sys
 
+    from gbulb import install
+
     called = False
 
     def set_event_loop_policy(pol):
@@ -48,6 +49,7 @@ def test_install(gtk, gtk_available):
 
 def test_get_event_loop():
     import asyncio
+
     import gbulb
 
     assert asyncio.get_event_loop() is gbulb.get_event_loop()
@@ -55,7 +57,9 @@ def test_get_event_loop():
 
 def test_wait_signal(glib_loop):
     import asyncio
+
     from gi.repository import GObject
+
     from gbulb import wait_signal
 
     class TestObject(GObject.GObject):
@@ -77,16 +81,16 @@ def test_wait_signal(glib_loop):
         assert r == (t, "frozen brains tell no tales")
         called = True
 
-    glib_loop.run_until_complete(
-        asyncio.wait([waiter(), emitter()], timeout=1)
-    )
+    glib_loop.run_until_complete(asyncio.wait([waiter(), emitter()], timeout=1))
 
     assert called
 
 
 def test_wait_signal_cancel(glib_loop):
     import asyncio
+
     from gi.repository import GObject
+
     from gbulb import wait_signal
 
     class TestObject(GObject.GObject):
@@ -118,9 +122,7 @@ def test_wait_signal_cancel(glib_loop):
         assert r.cancelled()
         cancelled = True
 
-    glib_loop.run_until_complete(
-        asyncio.wait([waiter(), emitter()], timeout=1)
-    )
+    glib_loop.run_until_complete(asyncio.wait([waiter(), emitter()], timeout=1))
 
     assert cancelled
     assert called
-- 
2.37.3

